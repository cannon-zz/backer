#!/bin/bash

#
# enum values taken from backer.h
#

BKR_NTSC=1
BKR_PAL=2
BKR_LOW=4
BKR_HIGH=8


#
# defaults
#

DEFAULT_VIDEOMODE=${BKR_NTSC}
DEFAULT_BITDENSITY=${BKR_HIGH}


#
# parse command line
#

function usage() {
	echo "Usage: bkrvideo [-Vn|-Vp] [-Dh|-Dl] [-v] < input"
}

VIDEOMODE=${DEFAULT_VIDEOMODE}
BITDENSITY=${DEFAULT_BITDENSITY}
VERBOSE=""

while getopts "D:V:v" OPT ; do
	case "${OPT}" in
	D)
		case "${OPTARG}" in
		l)
			BITDENSITY=${BKR_LOW} ;;
		h)
			BITDENSITY=${BKR_HIGH} ;;
		*)
			echo "unrecognized bit density -D${OPTARG}"
			usage
			exit 1 ;;
		esac ;;
	V)
		case "${OPTARG}" in
		n)
			VIDEOMODE=${BKR_NTSC} ;;
		p)
			VIDEOMODE=${BKR_PAL} ;;
		*)
			echo "unrecognized video mode -V${OPTARG}"
			usage
			exit 1 ;;
		esac ;;
	v)
		VERBOSE="-v" ;;
	*)
		echo "unrecognized option -${OPT}"
		usage
		exit 1 ;;
	esac
done


#
# construct and run pipeline.  the fake data format is a hack to force a
# specific format to get negotiated upstream of bkr_video_out, otherwise
# the base class gets confused.
#


FAKEFORMAT="audio/x-raw-int,channels=1,width=8,depth=8"
PIPELINE="fdsrc fd=0 ! $FAKEFORMAT "
if [ "${VERBOSE}" == "-v" ] ; then
	PIPELINE="${PIPELINE} ! progressreport name=Progress"
fi
PIPELINE="${PIPELINE} ! bkr_video_out videomode=${VIDEOMODE} bitdensity=${BITDENSITY} ! ffmpegcolorspace ! queue max-size-time=1000000000 ! autovideosink"

gst-launch ${VERBOSE} ${PIPELINE}
