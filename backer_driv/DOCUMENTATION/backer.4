.\" Copyright (c) 2001 Kipp Cannon (kcannon@users.sourceforge.net)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.TH BACKER 4 "December 30, 2001" "Linux" "Special Files"
.SH NAME
backer \- Backer video tape based storage device.
.SH INTRODUCTION
The Backer devices, manufactured by Danmere Technologies Ltd., allow data
to be stored on video tape using a standard video cassette recorder.
.PP
Backer devices were manufactured in two configurations:  internal, ISA,
interface cards and an external version that plugs into an ECP-compatible
parallel port.  This driver provides access to both varieties through the
use of two hardware-specific interface modules:
.IR backer_isa (4)
and
.IR backer_parport (4).
.SH CONFIGURATION
.SS MODULES
The driver is loaded by loading the main module
.RS 3
.sp
\fB$\fP modprobe backer
.sp
.RE
which in turn requests the module ``backer_lowlevel''.  This is a dummy
name that is meant to be re-directed to the desired hardware module(s)
through the use of appropriate options in
.IR modules.conf (5).
For example, the line
.RS 3
.sp
probeall backer_lowlevel backer_isa
.sp
.RE
would cause the ISA interface module to be loaded along with the main
module.
.SS DEVICE FILES
Each Backer unit attached to the system is represented by a set of
character device files.  By default they are owned by root:root with mode
0666.  The Backer driver does not have a standard major number assigned to
it but the source is distributed with 60 as the default.  This can be
adjusted to the needs of the system.  The minor number encodes the unit
number, video mode, bit density and data format.  In alphabetical order,
the device file names are:
.PP
.TS
center;
c c l.
Name	Minor	Format
_
\fBbacker/\fP\fIn\fP\fB/nhe\fP	12*\fIn\fP+0	NTSC, High Density, EP
\fBbacker/\fP\fIn\fP\fB/nhr\fP	12*\fIn\fP+1	NTSC, High Density, Raw
\fBbacker/\fP\fIn\fP\fB/nhs\fP	12*\fIn\fP+2	NTSC, High Density, SP/LP
\fBbacker/\fP\fIn\fP\fB/nle\fP	12*\fIn\fP+3	NTSC, Low Density, EP
\fBbacker/\fP\fIn\fP\fB/nlr\fP	12*\fIn\fP+4	NTSC, Low Density, Raw
\fBbacker/\fP\fIn\fP\fB/nls\fP	12*\fIn\fP+5	NTSC, Low Density, SP/LP
\fBbacker/\fP\fIn\fP\fB/phe\fP	12*\fIn\fP+6	PAL, High Density, EP
\fBbacker/\fP\fIn\fP\fB/phr\fP	12*\fIn\fP+7	PAL, High Density, Raw
\fBbacker/\fP\fIn\fP\fB/phs\fP	12*\fIn\fP+8	PAL, High Density, SP/LP
\fBbacker/\fP\fIn\fP\fB/ple\fP	12*\fIn\fP+9	PAL, Low Density, EP
\fBbacker/\fP\fIn\fP\fB/plr\fP	12*\fIn\fP+10	PAL, Low Density, Raw
\fBbacker/\fP\fIn\fP\fB/pls\fP	12*\fIn\fP+11	PAL, Low Density, SP/LP
.TE
.PP
When used with the device file system (devfs), the necessary files will be
created automatically when the driver is loaded.  The \fIn\fP appearing in
the path of each device as well as in its minor number is the hardware unit
number.  Units are numbered from 0 in the order in which the hardware
modules register them.  The three letter file name identifies the video
mode, the bit density, and the data format selected by accessing that
particular file.
.PP
If a Backer is to be used as the system's default tape device then it is
helpful to create a symbolic link named \fB/dev/tape\fP that points to the
preferred unit and mode.
.SS OPTIONS
The main module,
.IR backer (4),
does not have any options.  See the man pages for
.IR backer_isa (4)
and
.IR backer_parport (4)
for information on their use.
.SH DESCRIPTION
.SS GENERAL
The driver presents each Backer device as a set of character device special
files, one for each available format, that try to behave somewhat like
standard tape devices.  It is not possible to provide a fully functional
tape interface because the tape transport itself (your VCR) is not under
computer control.  This means that every task requires operator assistance
to complete in that somebody must manually press Play, Record, Rewind,
etc..
.PP
From a software perspective, the most important difference between the
Backer device and normal tape devices is the intrinsic block size.  For
reasons related to their tape format and drive hardware, most tape devices
require data to be transfered to and from them in ``blocks'' ---
drive-specific fixed sized quantities of data that are always some multiple
of 512 bytes.  The Backer device also has a preferred block size, namely
the quantity of data stored in one video frame.  Unfortunately, Backer's
block size is not a multiple of 512 bytes and is not even the same from one
format to the next.  This can cause some difficulties with very picky
software but in principal nothing that can't be worked around.  The
compromise arrived at in this case is for the Backer device driver to
perform partial software ``re-blocking'' of the data stream:  happily
accepting arbitrary transfer requests but returning short counts if unable
to completely fill the request immediately.
.PP
Apart from these two difficulties --- lack of automation and non-standard
block size --- the driver should be able to inter-operate with any software
designed for use with tape devices such as
.IR mt (1)
and
.IR tar (1).
See the \fBEXAMPLES\fP section below for more details.
.PP
The Backer hardware is compatible with both NTSC and PAL video equipment
and it can modulate the data stream into the video signal at two bit
densities, ``high'' and ``low''.  In addition to the hardware settings, one
can also choose from two tape data formats and a pass-through mode.  One of
the formats is intended for short and long play (SP and LP) recordings and
the other for extended play (EP) recordings while the pass-through mode
by-passes all data processing within the driver providing access to the raw
tape data stream.  The desired settings are selected by accessing the
appropriate device file.
.PP
A data transfer is started by making a call to
.IR read (2)
or
.IR write (2)
and stopped by
.IR close (2).
For obvious practical reasons, only one transfer can occur at a time on
each unit so once a transfer has been started on a file descriptor, all
other reads and writes on all other descriptors corresponding to the same
unit will fail.  Since the hardware is not full duplex, if a device is
opened with mode \fBO_RDWR\fP the first
.IR read (2)
or
.IR write (2)
call selects the transfer direction and any subsequent calls in the other
direction fail until the device is closed and re-opened.
.PP
Data written to and read from the non-raw files is clean, synchronous and
commensurate:  it will be retrieved error-free;  the, say, 2000th byte
written will be the 2000th byte read back;  and exactly as many bytes as
were written will be played back (the data is not padded to a multiple of
some size).
.SS "RAW INTERFACE"
The raw device files provide access to the actual tape data.  When writing,
the first byte written is placed in the first position in the top line of
the first video field and so on.  When reading, all the pleasantries of the
raw video signal are present:  tape noise, missing video lines, etc..  The
interface provided by these files allows the requisite data formating and
signal processing to be performed in user space thus not only permitting tapes
in formats foreign to the driver itself to be read and written but also
allowing computers too slow to perform the processing in real time to make use
of higher bandwidth modes.  See
.IR bkrencode (8)
for more information on using this feature.
.SS "STATUS INFORMATION"
Hardware and driver status information is provided through the \fB/proc\fP
file system by the files \fB/proc/sys/dev/backer/\fP\fIn\fP\fB/status\fP.
Each device in the system has its own status file which contains a sequence
of data fields starting with the device's current operating state.
.PP
The meaning of each field in this file is given below and indicated after
each field heading is(are) the transfer direction(s) in which the field is
meaningful.  For example, a field marked ``reading'' is meaningless when
the device is writing.  Between transfers, when the device is stopped or
suspended, all fields will retain their values from the end of the last
transfer.  All numeric fields except the sector number (see below) are
displayed in unsigned decimal format.  The meaning of the fields is as
follows.
.TP
\fBCurrent State\fP (reading/writing)
The unit's state:  STOPPED, READING, WRITING, or SUSPENDED.
.TP
\fBCurrent Mode\fP (reading/writing)
A number indicating the video mode, bit density and data format of the
current transfer.  The masks and flags used to interpret this number can be
found in the header file, \fBbacker.h\fP.
.TP
\fBSector Number\fP (reading/writing)
The sectors of every recording are numbered in increasing, sequential,
order to provide a means by which buffer over- and underflows can be
identified during playback.  The sector number is a 25 bit signed integer
and so takes on values in the range -16777216 to +16777215 inclusively.
The numbering is arranged so that the first data sector of a recording is
sector number 0.  The sequence can wrap back to 0 if the data stream is
very long but this will take at least 4660 minutes (about 3.2 days) and so
is unlikely to occur in the context of normal, VCR-based, operation.  This
field shows the sector currently being transfered to/from user space.  The
driver's buffers introduce a delay of several seconds between this and the
sector being transfered to/from the tape.
.TP
\fBByte Errors\fP (reading)
Shows the total number of bad symbols that have been successfully corrected
since the current read operation started.
.TP
\fBIn Worst Block\fP (reading)
The first field shows the largest number of bad symbols that have been
detected in any one block of data since the current read operation started.
The second field is the number of Reed-Solomon parity symbols in each
block.  If the number of errors in a block exceeds 1/2 the number of parity
symbols then the block cannot be corrected.
.TP
\fBRecently\fP (reading)
Shows the largest number of bad symbols that have been detected in any one
block of data since the last time the \fB/proc\fP file was read.
.TP
\fBBad Blocks\fP (reading)
The number of blocks which the Reed-Solomon decoder detected could not be
corrected.  Not all uncorrectable blocks can be detected (imagine errors
occurring in such a way that they make the block look like another valid or
correctable block).
.TP
\fBFraming Errors\fP (reading)
An upper bound can be placed on the number of bytes which need to be
searched before a sector key is found and this displays the number of times
this bound was exceeded since the current read operation started.  Framing
errors do not necessarily represent lost data but are symptomatic of a poor
quality recording.
.TP
\fBOverrun Errors\fP (reading)
The number of times the sector sequence number skipped in the positive
direction indicating that the incoming video data filled the I/O buffer and
the computer could not keep up.
.TP
\fBUnderflows\fP (reading)
The number of times the sector sequence number skipped in the negative
direction indicating repeated sectors on the tape.  This indicates that
when the data was written, the computer could not generate it as fast as it
was being sent to tape causing the I/O buffer to empty (and then loop).
Apart from wasting several tens of kilobytes of tape, underflows are
non-destructive.
.TP
\fBWorst Key\fP (reading)
The first field shows the lowest correlation value assigned to a string of
bytes identified as a sector key.  The second field shows the maximum
possible correlation value (the correlation value assigned to a perfect
match).
.TP
\fBClosest Non-Key\fP (reading)
The highest correlation value assigned to a string of bytes identified as
not being a sector key.
.TP
\fBSmallest Field\fP (reading)
The size in bytes of the smallest video field encountered so far during
playback.
.TP
\fBLargest Field\fP (reading)
The size in bytes of the largest video field encountered so far during
playback.
.TP
\fBI/O Buffer\fP (reading/writing)
The first field shows the number of bytes in the I/O buffer.  The second
field shows the size of the I/O buffer.  Ideally the buffer will be kept
completely full whilst writing and completely empty whilst reading.
.PP
The worst key and closest non-key must have a comfortable margin between
them if one is going to uniquely identify sector keys in the data stream.
The difference between the smallest and largest video fields shows the
variability in the number of lines generated by a VCR during playback.
.SS "FORMAT TABLE"
The parameters describing each of the driver's data formats are stored,
internally, in look-up tables.  Each Backer device has its own format table
which is initialized from a global default and can be accessed via the file
\fB/proc/sys/dev/backer/\fP\fIn\fP\fB/format_table\fP or via the
.IR sysctl (2)
system call.  To access Backer parameters via
.IR sysctl (2),
the following vectors should be used for the \fBname\fP field:  for
accessing status information use \fB{ CTL_DEV, DEV_BACKER, BACKER_STATUS
}\fP; and for the format table use \fB{ CTL_DEV, DEV_BACKER, BACKER_FORMAT
}\fP.  Both \fBlinux/sysctl.h\fP and \fBbacker.h\fP must be included for
these constants to be defined.
.PP
For each of the 12 data formats there are 15 signed integer parameters ---
180 in total --- describing such things as the number of bytes in each
video field, the number of parity bytes to use in each block, etc..  The
\fBformat_table\fP file is simply a white-space separated list of the 180
parameters.  See \fBbacker.h\fP and the driver source code for information
on the parameters and techniques for construction of new parameter tables.
.PP
\fIWARNING\fP:  It is possible to corrupt your kernel (crash your system)
by loading invalid format tables into the driver.  This interface is only
meant to provide an experienced user with an easier method for tuning the
driver's behaviour than modifying its source code.  Competance is assumed.
Use with care!
.SH EXAMPLES
The examples below assume that \fB/dev/tape\fP is a link to the desired
device.
.SS "BASIC USE"
To save a file to tape, press Record and type
.RS 3
.sp
\fB$\fP cp \fIfilename\fP /dev/tape
.sp
.RE
On your television, when the recording first starts, you will see the
beginning-of-record (BOR) mark which consists of vertical bars and will
last for several seconds.  That will be followed by what, for the most
part, is random noise until the recording ends with the end-of-record (EOR)
mark.  To verify the recording, position the tape just before or at the
beginning of the recording,  press Play and type
.RS 3
.sp
\fB$\fP cmp /dev/tape \fIfilename\fP
.sp
.RE
To retrieve the file, position the tape at the start of the recording, as
above, and type
.RS 3
.sp
\fB$\fP cp /dev/tape \fIfilename\fP
.sp
.RE
If the computer isn't fast enough to process the data in real time then
buffer over- and underflows will be seen.  In this case it will be
necessary to use off-line processing.  See
.IR bkrencode (8)
for more information.
.SS "STRICT REBLOCKING"
For software, such as
.IR tar (1),
that insists on interacting with a tape device by reading and writing some
multiple of 512 bytes, it is necessary to perform stricter re-blocking than
that done by the Backer device driver.  This can be accomplished by
directing the data stream through a Linux pipe since the kernel will
perform the necessary re-blocking.  If the software in question can be
directed to read and write through
.IR stdin (3)
and
.IR stdout (3)
then simply do so.  For example
.RS 3
.sp
\fB$\fP tar -x < /dev/tape \fIfilename\fP
.sp
.RE
If the software must be given a file name then an intermediate FIFO is
required.  Here is an example
.RS 3
.sp 
\fB$\fP mkfifo pipe
.br
\fB$\fP cp /dev/tape pipe &
.br
\fB$\fP tar -xf pipe \fIfilename\fP
.br
\fB$\fP rm pipe
.sp
.RE
See below for more information on the use of
.IR tar (1)
with the Backer device.
.SS "USE WITH tar"
.IR tar (1)
was mentioned above as an example of a program that requires strict block
sizes to be adhered to when reading and writing.  Although this problem can
be overcome through the use of Linux pipes, GNU
.IR tar (1)
can also perform the re-blocking on its own if provided with the \fB-B\fP
or \fB--read-full-blocks\fP command line options.  For example
.RS 3
.sp
\fB$\fP tar -xBf /dev/tape \fIfilename\fP
.sp
.RE
is sufficient.
.SS "MACHINE-TO-MACHINE COPYING"
If two computers with Backers are available then it is possible to use the
Backers to copy data between them.  This is accomplished by cross wiring
the cards (output of ``transmitter'' to input of ``receiver'') then at the
transmitting machine writing data to a device file while at the receiving
machine reading the data from the corresponding device file.  Any of the
non-raw modes can be chosen as long as both machines are speaking the same
one but high-density SP mode PAL (phs) is recommended since it has the
highest code rate.
.SH IOCTLS
The following
.IR ioctl (2)
calls are understood.
.IP \fBMTIOCTOP\fP
Accepts a pointer to an \fBmtop\fP structure which is used to access
several sub-commands.  The following sub-commands are understood (all
others result in \fB-EINVAL\fP):
.\".RS +0.5i
.RS
.TP
\fBMTNOP\fP
Does nothing.
.TP
\fBMTRESET\fP
Does nothing.
.RE
.IP \fBMTIOCGET\fP
Accepts a pointer to an \fBmtget\fP structure which is filled with the tape
drive and driver status.  The structure's fields are filled as follows:
.\".RS +0.5i
.RS
.TP
\fBmt_type\fP (drive type)
Set to \fBMT_ISUNKNOWN\fP.
.TP
\fBmt_dsreg\fP (device dependent status bits)
Set to the mode represented by the device file on which the ioctl is
performed.  See \fBbacker.h\fP for information on the flags used for this.
.TP
\fBmt_gstat\fP (device independent status bits)
The \fBGMT_ONLINE\fP bit is set.
.TP
\fBmt_blkno\fP (block number)
Set to the current sector number.
.TP
\fBmt_resid\fP (residual count)
Set to the number of bytes that need to be transfered in order to
fill/empty the current sector.
.TP
\fBmt_erreg\fP (corrected errors)
Set to the total number of errors that have been corrected since the last
read started.
.TP
\fBmt_fileno\fP (file number)
Not used (set to 0).
.RE
.IP \fBMTIOCPOS\fP
Accepts a pointer to an \fBmtpos\fP structure which is filled with the
current sector number.
.PP
For the definitions of the structures mentioned above or for more
information generally on these calls see \fBsys/mtio.h\fP and
\fBbacker.h\fP.
.SH ERRORS
The following is a list of the error codes that can be generated by the
driver's main module and the reasons for them.  See the documentation for
the low level modules for the error codes they can generate.
.IP \fBEAGAIN\fP
.PD 0
.RS +0.5i
.TP 2
o
The current operation would block and non-blocking I/O has been selected.
.RE
.PD 1
.IP \fBEBUSY\fP
.PD 0
.RS +0.5i
.TP 2
o
The device inodes could not be created in the devfs filesystem.
.TP 2
o
An attempt was made to start a transfer or change the direction of a
transfer while one was already in progress on the same unit.
.TP 2
o
An attempt was made to start a transfer with the device in the
``suspended'' state.  Backers do not have hardware power management
capabilities but the device driver does participate in the system's power
management by informing the kernel of device activity and rejecting I/O
requests while the system is suspended.
.TP 2
o
An attempt was made to read or write data on a file descriptor that is
already being used for a read or write operation.  This indicates that two
processes have the exact same file descriptor and have tried to use it
simultaneously --- this might be a bug in the user application.
.RE
.PD 1
.IP \fBEFAULT\fP
.PD 0
.RS +0.5i
.TP 2
o
A memory priveledge violation occured (the user has passed an address to
the driver that the user does not have access to).
.RE
.PD 1
.IP \fBEINTR\fP
.PD 0
.RS +0.5i
.TP 2
o
A signal arrived while an I/O operation was blocked.
.RE
.PD 1
.IP \fBEINVAL\fP
.PD 0
.RS +0.5i
.TP 2
o
A call was made to
.IR ioctl (2)
with an unrecognized ioctl function or sub-function.
.RE
.PD 1
.IP \fBENODATA\fP
.PD 0
.RS +0.5i
.TP 2
o
The current sector is irrecoverable.  Each irrecoverable sector is
discarded from the data stream and exactly one ENODATA is returned in its
place.   A sector is labeled as irrecoverable if the Reed-Solomon error
correction system detects that a block within the sector cannot be
corrected or if the sector is lost in a buffer overrun.
.RE
.PD 1
.IP \fBENODEV\fP
.PD 0
.RS +0.5i
.TP 2
o
The minor number requested does not correspond to any registered unit.
.RE
.PD 1
.IP \fBENOMEM\fP
.PD 0
.RS +0.5i
.TP 2
o
Some internal structures could not be allocated on device open.
.TP 2
o
The sector buffer could not be allocated on read/write.
.RE
.PD 1
.IP \fBESPIPE\fP
.PD 0
.RS +0.5i
.TP 2
o
A call was made to
.IR lseek (2).
The device is not seekable.
.RE
.PD 1
.IP \fBETIMEDOUT\fP
.PD 0
.RS +0.5i
.TP 2
o
The current operation timed out.  For the external version, this condition
indicates that no data is being sent or received through the parallel port.
Perhaps there is a faulty connection between the VCR and the Backer or
between the Backer and the computer;  perhaps the
.IR backer_parport (4)
low-level driver has been configured for the wrong parallel port;  or
perhaps the Linux parport subsystem has not been properly configured for
the parallel port.  For the internal Backer, this condition should never
occur.  If it does, this indicates the presence of a bug in the driver ---
please submit a bug report.
.RE
.PD 1
.SH NOTES
.SS "EP RECORDINGS"
Since version 3.0 of the driver, the data conditioning and processing
algorithms used by the driver have been capable of storing and recovering
data from tapes recorded in EP (extended play) mode although it was not
particularly reliable.  With the addition of the
.IR bkrenhanced (8)
utility in version 3.1 and a new sector key locator algorithm in version
3.2, it became possible to reliably record data in EP modes.  Overall, EP
recordings to not offer significantly higher capacity than LP recordings
made on the same tape because the longer length of an EP recording is
partially offset by its lower data rate.  If, however, your VCR is like
mine and does not have an LP mode then an EP recording is your only choice
if you want the higher capacity.
.SS "RECORDING LONGEVITY"
Backer's don't seem to be able to recover their data from tapes that have
been sitting for a long time.  My one data point in this matter is a tape
that I recorded at low density (with Danmere's Windows software) and then
tried to recover data from after it had sat on a shelf for two years.  For
the most part the tape could be recovered except for one file which could
not be.  The conclusion I have drawn from this is that this technology is
not well suited to the long-term archival of data.  It is, however, quite
well suited for the use it is meant for:  backing up a hard disk.
.PP
If you make regular backups then you will probably not need any one tape to
be readable beyond several months.  Over this period you should find you
have no problems at all with tape stability.  Obviously the stability of
the data on a tape can be improved by doing anything that will reduce the
likelihood of magnetic domains flipping.  This means keeping the tape away
from sources of heat and magnetic fields.  Don't leave tapes near furnace
grates, near radiators, sitting in the sun or even sitting in a room that
is excessively warmed by the sun.  Do not leave tapes near television sets,
near speakers, near electric motors, etc..
.PP
It is reasonable to expect EP recordings to be less stable than SP/LP
recordings.  If you do not make frequent backups, it is probably a better
idea to not use EP recordings until more is known about their relative
stability.
.SS "TAPE CARE"
VCRs are not as gentle with their tapes as data grade transports are
designed to be.  In particular, VCRs have a tendency to stretch tapes when
starting and stopping them as the transport mechanism unspools and spools
the tape from the cassette.  To improve the reliability of backups, try to
avoid as many start/stop cycles for each tape as is reasonably possible.
Especially avoid using the visual search functions of the VCR with any tape
that will be used to store data.  I should stress the word ``reasonably'',
though, since there's no need to be overly cautious --- I have actually
safely recovered data from visibly damaged tapes.
.SS "I/O SEMANTICS"
The POSIX standard does not specify the result, when working with
special files, of passing a byte count of 0 to the
.IR write (2)
system call.  For this device driver, a byte count of 0 is a normal write
operation with all of the usual side effects but no data is transfered.  In
other words, this will start a tape data transfer if one has not yet been
started then it will return 0 or the last error code is one is pending.
.PP
The
.IR close (2)
system call will block until all of the buffers have been flushed.  This
generally takes several seconds and is considered bad design... sue me.
.SH FILES
.IP /dev/backer/*/*
The device files.
.IP /proc/sys/dev/backer/*/status
Driver and hardware status information.
.IP /proc/sys/dev/backer/*/format_table
Device format parameter table.
.SH "SEE ALSO"
.IR mt (1),
.IR tar (1),
.IR backer_isa (4),
.IR backer_parport (4),
.IR bkrcheck (8),
.IR bkrencode (8),
.IR bkrenhanced (8),
.IR bkrmonitor (8)
.SH AUTHOR
Kipp Cannon (kcannon@users.sourceforge.net).
.SH AVAILABILITY
The most recent version of the driver and utilities can be found on
SourceForge at:
.RS
.sp
http://www.sourceforge.net/projects/linbacker
.sp
.RE
.SH HISTORY
.TS
center;
c l c.
Date	Event	Version
_
2000/10/10	First public release	0.2
2001/01/13	First stable release	1.0
2001/04/12	First 2.x stable release	2.0
2001/06/02	First 3.x stable release	3.0
.TE
