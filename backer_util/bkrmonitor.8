.\" Copyright (c) 2001 Kipp Cannon (kcannon@users.sourceforge.net)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.TH bkrmonitor 8 "March 21, 2001" "Linux" "Backer"
.SH NAME
bkrmonitor \- Backer tape I/O monitor.
.SH SYNOPSIS
\fBbkrmonitor\fP [-h] [-f \fIdevname\fP] [-t \fIinterval\fP]
.SH DESCRIPTION
The \fBbkrmonitor\fP utility is a GTK+ application for monitoring the
status of the
.IR backer (4)
driver.  When you run the program it shows a window in which it
continuously displays the information returned by \fBMTIOCPOS\fP and
\fBBKRIOCGETSTATUS\fP
.IR ioctl (2)
calls.  You can run the application at any time (before or after you start
a transfer) but you must stop and restart the application if you change the
driver mode.  This is because the amount of the DMA buffer that gets used
depends on the mode so the value \fBbkrmonitor\fP uses for ``full scale''
must be reset.
.PP
This application can help to diagnose any problems you might encounter
recovering data from tapes since it can display the exact type of read
error that occurred.  It is not necessary for \fBbkrmonitor\fP to be running
at the time the error occurs.  It can be run after the fact since the error
counts are only reset when a new transfer is started.
.PP
.SS OPTIONS
.TP
\-h
Print a usage message.
.TP
\-f \fIdevname\fP
When automatically retrieving the desired mode, retrieve it from
\fIdevname\fP.  If this option is not given then the mode is retrieved from
the compiled-in default file.
.TP
\-t \fIinterval\fP
Set the update interval to \fIinterval\fP milliseconds.
.SS DISPLAY
The meanings of the fields in the display are as follows.
.TP
\fBSector Number\fP
The current sector number being transfered to/from user space.  The DMA
buffer introduces a delay between this and the sector being transfered
to/from the tape.
.TP
\fBTotal Errors Corrected\fP
Shows the total number of bad symbols that have been successfully corrected
since the current read operation started.
.TP
\fBErrors in Worst Block\fP
The most number of bad symbols that were corrected in any one block of
data.
.TP
\fBUncorrectable Blocks\fP
The number of blocks which the Reed-Solomon decoder detected could not be
corrected.  Not all uncorrectable blocks can be detected (imagine errors
occurring in such a way that they make the block look like another valid or
correctable block).
.TP
\fBFraming Errors\fP
An upper bound can be placed on the number of bytes which need to be
checked before a key is found and this counts the number of times this
bound was exceeded.
.TP
\fBOverrun Errors\fP
The number of times the block sequence number skipped in the positive
direction indicating that the incoming video data filled the DMA buffer and
the computer could not keep up.
.TP
\fBUnderflows Detected\fP
The number of times the block sequence number skipped in the negative
direction indicating repeated sectors on the tape.  This indicates that
when the data was written, the computer could not generate data as fast as
it was being sent to tape causing the DMA buffer to empty (and then loop).
Apart from wasting several tens of kilobytes of tape, underflows are
non-destructive.
.TP
\fBWorst Key\fP
The lowest correlation value assigned to a string of bytes identified as
the sector key.
.TP
\fBClosest Non-Key\fP
The highest correlation value assigned to a string of bytes identified as
not being the sector key.
.TP
\fBLeast Skipped\fP
The least number of bytes which were skipped before locating the sector
key.
.TP
\fBMost Skipped\fP
The most number of bytes which were skipped before locating the sector key.
.PP
The worst key and closest non-key must have a comfortable margin between
them if one is going to be able to identify the sector key in the data
stream.  The difference between the least and most skipped numbers shows
the variability in the number of lines generated by a VCR during playback.
.TP
\fBRecent Errors\fP
This graph is pulsed whenever a block with errors in it is encountered.
The height of the pulse indicates the number of errors that occurred with
the maximum being the limit of the error correcting code's capabilities.
After being pulsed, the graph decays back to zero.
.TP
\fBDMA Buffer\fP
This shows the quantity of data in the DMA buffer.  Ideally this will be
kept completely full while writing and completely empty while reading.
.SH "SEE ALSO"
.IR backer (4),
.IR bkrcheck (8),
.IR bkrencode (8)
.SH AUTHOR
Kipp Cannon (kcannon@users.sourceforge.net).
.SH AVAILABILITY
The most recent version of the driver and utilities can be found on
SourceForge at:
.RS
.sp
http://www.sourceforge.net/projects/linbacker
.sp
.RE
.TE
