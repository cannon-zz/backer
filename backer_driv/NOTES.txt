Preamble:
---------

The following information was obtained by experimenting with a Backer 16
card.  The manual describes it as a model ISA45202 (version 1.2.1).  The
information should also apply to Backer 32 cards since Danmere's web site
suggests that Backer 32s are identical to Backer 16s with the exception of
a different analog section to improve the signal-to-noise ratio.  The names
of the bits on the I/O port are those listed by MONITOR.EXE, an MS-DOS
utility that came with the card.  The rest of the information was obtained
by trial-and-error and might be incorrect/incomplete.


Bits on I/O port:
-----------------

	X X X X X X X X
	| | | | | | | |
	| | | | | | | +---  Data Rate
	| | | | | | +-----  DMA Request
	| | | | | +-------  Data
	| | | | +---------  Sync
	| | | +-----------  Frame Busy
	| | +-------------  Transmit
	| +---------------  Receive
	+-----------------  Video mode


Data Rate:
----------

Setting this bit to 1 puts 10 bytes on each line of video while setting it
to 0 puts 4 bytes on each line.


DMA Request:
------------

When writing to the port, the value of this bit starts and stops DMA
transfers.  When reading from the port, the value of this bits indicates
whether or not data is actually being transfered.

Write a 1 to this bit to enable PERIPHERAL <---> RAM transfers. Write a 0
to this bit to stop PERIPHERAL <---> RAM transfers.  The card is apparently
designed for use with the "demand transfer" mode of the DMA controller in
which transfers are paused and resumed asynchronously by the peripheral
card raising and lowering its DREQ line.  It is desireable for peripherals
which are, by design, slower than the system bus to use this mode since it
gives other devices access to the bus while the peripheral catches up to
its internal buffer.

When reading from the port this bit indicates the current status of the
DREQ line with a 1 indicating an active DREQ and 0 indicating inactive
DREQ.  Despite this, it is not safe to synchronize count and residue
updates to this bit.  I have found that only the sync bit can be used for
this purpose (see below).

It is convenient to configure the DMA controller to autoinitialize the
channel that's being used.  This allows the card to generate a nice
continuous video signal without being baby-sat by software.

Writing 0 to the DMA Request bit not only stops the transfer but causes the
card to signal an EOP to the DMA controller which, if configured to
autoinitialize, will reset its address and count registers to the their
original values.


Data:
-----

I don't know what this does but I believe it mirrors the data as it is
clocked into and out of the card.  Of course, there's no way you can read
the port fast enough to make use of this.


Sync:
-----

This bit == 0 during sync intervals (horizontal AND vertical).  It is safe
to read the DMA count and residue registers when this bit is 0.  By "safe"
I mean that while this bit != 0 the card is actively transfering data so
the residue/address read from the DMA controler is not guaranteed to
correspond in any way at all to the true location of the current transfer.

I have found that even this seems to not work too well and I'm fairly
positive the problem lies with getting the numbers from the DMA controller
before they change.  The symptom is that the low byte of the number read
from the DMA controller seems to be, only _very_ occasionally, invalid so
to be sure you don't over write the current transfer point you should not
access memory within 256 bytes of the reported DMA transfer location (my
device driver is written to always stay 512 bytes away just to be sure).


Frame Busy:
-----------

This bit seems to only be of use during memory -> tape transfers.  Also,
"frame busy" is a misnomer;  it would be better to call this bit "field
busy".

This bit is 0 while the card is processing a field of video and goes to 1
when it is pausing during the vertical retrace interval.  NOTE:  even if
frame busy is 1 it is still only safe to access the DMA controller while
the sync bit is 0.  The card has a four byte internal buffer and it reads
one buffer-length ahead of itself in memory.  That means that during memory
-> tape transfers dma activity continues a little after frame busy goes to
1.

During tape -> memory transfers this bit "rolls".  The phase of the 0-to-1
transitions drifts with respect to the vertical sync making this bit
useless.  Or maybe I'm doing something wrong...


Transmit and Receive:
---------------------

Setting one of these bits to 1 configures the card for the respective
transfer type.  Setting both to 0 disables I/O.


Video mode bit:
---------------

The meaning of this bit depends on whether the port is being read or
written.

	writing:  1 == NTSC, 0 == PAL
	reading:  1 == PAL, 0 == NTSC


Video mode information:
-----------------------

In NTSC mode, for even fields data starts on line 10 and ends on line 262;
in odd fields it also starts in line 10 and ends in line 262 but the card
will transfer data corresponding to line 263 of the odd field.  Although
inserted into the video signal, the extra line will not be recorded
properly as it occurs during the 1/2 period line that is at the end of the
odd field.  This has to do with the interlacing of the video image on a
television screen:  shifting the fields 1/2 of a line period with respect
to each other shifts the phase of the televisions' horizontal scanning with
respect to its vertical scanning resulting in a vertical 1/2 line-thickness
shift of the lines on the picture tube thus correctly interlacing the
image). Since this last line of the odd field corresponds to the 1/2 period
horizontal scan there is a sync pulse in the middle of it which overwrites
the bits in the middle of the line.

During playback, the actual number of lines generated by a VCR is variable
--- recall that the video signal standard does not specify the actual
number of lines in a field but rather the ratios of the various scan
frequencies.  One cannot rely on the card reading a fixed quantity of data
into memory for each field of video and in particular one cannot rely on
the bottom few lines of a video field being reproduced.  For this reason,
no data should be placed in the bottom few lines and a software mechanism
for asynchronously identifying the data associated with a particular video
field is required.

There are 30 frames per second (60 fields per second).  If one wants to to
insert human-readable graphics into the byte stream then the following
applies.  The order in which data in the DMA buffer is arrange (visually)
on the screen is as expected with the odd field coming first i.e. the byte
display sequence is

	LINE 0   (odd  field line 10) -byte0--byte1--byte2-...
	LINE 254 (even field line 10) -byte0--byte1--byte2-...
	LINE 1   (odd  field line 11) -byte0--byte1--byte2-...
	LINE 255 (even field line 11) -byte0--byte1--byte2-...
	LINE 2   (odd  field line 12) -byte0--byte1--byte2-...
	etc. ...

with the bits in each byte arranged msb to lsb left to right.  Bits that
are 1 appear white, bits that are 0 appear black.

Since I do not have access to PAL video equipment I have not been able to
do any testing of the behaviour of the card in this mode except to check
its output with an oscilloscope.  I, therefore, have far less information.
In PAL mode, for odd fields active data starts on line 6 and ends on line
310; for even fields data starts on line 319 and ends on line 622 but again
the card transfers an extra line of data corresponding to line 623 of the
video signal --- a 1/2 period line.  That gives a total of 610 lines of
data transfered per frame with 609 of them containing useful data.  There
are 25 full frames per second (50 fields per second) meaning PAL has a
higher data rate than NTSC.


Hardware Response:
------------------

The following are some tid-bits regarding the behaviour of the card.

(i)  The card requires a video signal to be present on its input in order
to generate an output signal.  This might be an intentional feature of the
hardware designed to allow the presence of a VCR to be detected.  One can
check to see if a video signal is present on the input by waiting for the
sync bit to toggle within a period of time (it will be toggling about 15000
times a second if a video signal is present so you don't have to wait too
long to know that there's no signal there).

(ii)  During playback, the card will (sometimes) skip over lines containing
all 0's.  I do not yet know if there is a pattern to this behaviour.  For a
while I though that it required a minimum of two blank lines in a row
before the card started skipping lines but I have since discovered that it
will skip data even if this condition is met.  The card might require that
there be a minimum number of bit transitions distributed throughout the
video line in order for it to keep its bit clock synchronized.  In any
case, software using the card must take measures to ensure long runs of 0's
don't occur otherwise they will be skipped over during playback and corrupt
the data stream.


Windows Format Notes:
---------------------

This section contains notes I have compiled regarding the data format used
by the windows software.

(i)  Unused lines are filled with 0x33.  The exeption is the human-readable
file number graphic at the bottom of each field which has single lines of
0's separating it from the data above and 0x33's below.  These lines of 0's
are not skipped over by the card during playback and so corroborate the
assertion that _single_ lines of 0's can be safely inserted into the byte
stream.

(ii)  Each field begins with 24 lines filled with 0xE2.  The function of
this block is not known and its presence does not seem to have any effect
on the card's behaviour (it does not, for example, fix the rolling of the
frame busy bit during playback).  It's probable that this serves the same
role as the sector header used in my own format but I have found that only
8 lines are required to satisfy that role.  At least on my equipment...
(reminder:  a VCR typically requires the first part of the video field to
lock onto the track so data cannot be reliably recorded in some number of
lines at the top of each video field).
