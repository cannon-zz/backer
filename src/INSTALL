                           INSTALLATION INSTRUCTIONS
                           =========================


HARDWARE INSTALLATION
---------------------

You have probably had your Backer working under Microsoft Windows in which
case you already have it installed and know there are no hardware
conflicts.

If you are installing an internal (ISA) version of the device for the first
time then you should first check to see which I/O ports and DMA channels
are being used in your system by taking a look at the two files
/proc/ioports and /proc/dma.  Set the jumpers on your Backer to a free I/O
port and free DMA channel or at least a DMA channel used by a device you
know you will never want to use at the same time as the Backer.  Then
follow the installation instructions that came with the card.

The external version plugs into a parallel port.  Before you can use this
driver to interface with your external Backer, however, you will first need
to make sure your Linux kernel's parallel port subsystem is properly
configured.  Specifically, you need to do the following:

	-insure the Linux parport driver is installed and recognizes your
	 parallel port as a PC-style ECP port
	-insure the parport driver knows the port's interrupt line number
	-insure the parport driver knows the port's DMA channel number

To check these points, look at the files

	/proc/sys/dev/parport/<port name>/modes
	/proc/sys/dev/parport/<port name>/irq
	/proc/sys/dev/parport/<port name>/dma

where <port name> is the name of the parallel port to which your Backer is
attached (eg. ``parport0'').  In the modes file you must see ``PCSPP'',
``ECP'' and ``DMA'' all listed and the two files irq and dma must contain
the correct numbers for the port.


SOFTWARE INSTALLATION:  Expert Instructions
-------------------------------------------

To configure, compile, and install the driver and utilities, the following
should work.

	$ ./configure ; make ; make install [install-devs]

where the install-devs target should be added if your system is not using
devfs.

A .spec file is also provided that can be used to build .rpm's of the
drivers, device inodes and utilities.  If you know what you are doing, you
can take a look at the .spec file and tune it to your needs;  you know what
to do after that.  If you don't know what you're doing and still want a
.rpm, try

	$ rpmbuild -ta backer-*.tar.gz

Who knows, it might even work.  My goal is for this to work so if it
doesn't, let me know and I'll help you out.


SOFTWARE INSTALLATION:  Detailed Instructions
---------------------------------------------

Here are the steps for installing the Backer device driver and utilities.

1.  Configure the source tree for your system by typing

	$ ./configure [options]

from the top-level directory in the source tree.  Use --help to get a list
of options.  In addition to the standard GNU configure options, like
--prefix, the following are available:

  --with-kernel-version=ver

	If you have multiple Linux kernel source trees installed, you can
	use this option to select the one to compile the driver against.

  --with-kernel-headers=dir

	Use this option if configure cannot find your kernel source
	headers.

  --with-modulesdir=dir

	This option sets the directory in which the modules will be
	installed.

  --with-backer-major=number

	The driver has not been assigned an official character device major
	number but is shipped with 60 set as the default.  This is in one
	of the blocks of numbers reserved for ``experimental and local
	use'' and so should be fine.  If this choice conflicts with some
	other driver already in your system, use this option to select a
	different major number for the driver.  NOTE:  a trick that might
	work for you if you are using the device file system (devfs) is to
	set the major number to 0 which will result in an unused number
	being assigned automatically when the driver is loaded.

  --with-default-dev=device

	Many of the utilities have a compiled-in default device file name
	to use on various occasions when a specific one is not provided by
	the user.  Normally ``/dev/tape'' is used as the default name.  Use
	this option to set a different device name to compile in as the
	default.


2.  Compile the driver and utilities by typing

	$ make

When compilation is complete, the driver modules will be found in the
drivers/ subdirectory and the utilitis in the utilities/ subdirectory.


3.  Install the drivers, utilities, and man pages by typing

	$ make install [DESTDIR=dir]

If the optional DESTDIR variable is set then that directory is used as the
root of the install tree.  If the DESTDIR variable is not set then after
the drivers are installed depmod is run in order to rebuild your system's
module dependancy database.

If you are using devfs then skip to the next step.  If you are not using
devfs then you will also need to install device inodes to access the
driver.  Do this by typing

	$ make install-devs [DESTDIR=dir]

which will create the inodes for Backer units 0, 1 and 2.  If your system
has more than three Backers installed then you will have to manually create
the inodes for the additional units.  See the driver man pages for the
correct minor numbers to use.  If the optional DESTDIR variable is set then
that directory is used as the root of the install tree.


POST-INSTALL CONFIGURATION
--------------------------

1.  OPTIONAL.  Specify the low-level module(s) that should be automatically
loaded by adding the following line to /etc/modules.conf

	probeall backer_lowlevel <modules...>

where <modules...> is replaced with the names of the desired low-level
module(s).  For example,

	probeall backer_lowlevel backer_isa

would cause the ISA interface module to be loaded.  If you need to specify
options for the low-level module(s), add whichever of the following lines
are appropriate to /etc/modules.conf

	options backer_isa <options...>
	options backer_parport <options...>

See the man pages for available options.  When finished, re-read the config
file by doing

	$ depmod -a


2.  OPTIONAL.  Create /dev/tape link.  The driver is designed to imitate a
standard magnetic tape drive.  Many applications assume that if a system
has a tape drive installed, it can be accessed as /dev/tape.  If you want
to use your Backer as your default tape device then you should create a
symbolic link called /dev/tape that points to your preferred Backer device.
This is done by typing something like

	$ ln -s backer/0/nhs /dev/tape

which would select high density NTSC in SP mode as the default tape format.

If you are using devfs then you will have to create this link every time
the system reboots.  This can be done automatically if you are running
devfsd.  To configure devfsd to automatically create and remove the
/dev/tape link as the driver is loaded and unloaded, add something like the
following lines to your /etc/devfsd.conf

REGISTER        ^backer/0/nhs$  CFUNCTION GLOBAL symlink $devname tape
UNREGISTER      ^backer/0/nhs$  CFUNCTION GLOBAL unlink tape

and then tell devfsd to re-read its config file by doing

	$ killall -HUP devfsd

See the documentation for devfsd for more information on devfs management.


3.  OPTIONAL.  To let your system take care of automatically loading and
unloading the driver when the device is accesed add something like the
following lines to /etc/modules.conf

	alias /dev/backer backer
	alias /dev/tape backer

The second line should, obviously, only be added if you will be using
/dev/tape as a link to a backer device.  Re-read the config file by doing

	$ depmod -a



LOADING/UNLOADING THE DRIVER
----------------------------

The driver can be loaded manually by loading the main module followed by
any necessary low-level modules.  For example,

	$ insmod backer
	$ insmod backer_isa

Alternatively, by using modprobe you can request the low-level module
alone.

	$ modprobe backer_isa

The main backer module will be automatically loaded first in order to
satisfy inter-module dependancies.  See the documentation for insmod,
rmmod, modprobe and modinfo for more information on kernel module
management.
